package code._4_student_effort;


//code challenge 1

/*
public class Main {

  public static void main(String[] args) {

    for(int i = 1;i <= 100;i++)
    {

      if(i%3==0 && i%5==0){
        System.out.println("FizzBuzz");
      } else if (i%3==0) {
        System.out.println("Fizz");
      } else if (i%5==0) {
        System.out.println("Buzz");
      } else if (i%7==0) {
        System.out.println("Rizz");
      } else if (i%11==0) {
        System.out.println("Jazz");
      } else {
        System.out.println(i);
      }
    }

  }
}

 */

//code challenge 2
import java.lang.*;

public class Main {

  public static String compute (int number) {
    String s = "";

    if(number%3 == 0) {
      s += "Foo";
    }
    if(number % 5 == 0) {
      s += "Bar";
    }
    if(number % 7 == 0) {
      s += "Qix";
    }

    while(number != 0) {

      int digit = number%10;

      if(digit == 3) {
        s += "Foo";
      }
      else if(digit == 5) {
        s += "Bar";
      }
      else if(digit == 7) {
        s += "Qix";
      }

      number /= 10;

    }

    return s;

  }

  public static int numberOfZeros (int number) {
    int c = 0;
    while (number != 0) {
      if(number%10 == 0) {
        c++;
      }
      number /= 10;
    }

    return c;
  }

  public static int numberOfTargetedDigits(int number) {
    int c = 0;
    while (number != 0) {
      if(number%10 == 3 || number%10 == 5 || number%10 == 7) {
        c++;
      }
      number /= 10;
    }
    return c;
  }

  public static int numberOfDivisors(int number) {
    int c = 0;
    if(number % 3 == 0) {
      c++;
    }
    if(number % 5 == 0) {
      c++;
    }
    if(number % 7 == 0) {
      c++;
    }
    return c;
  }


  //insert string into another string using StringBuffer, source: https://www.geeksforgeeks.org/insert-a-string-into-another-string-in-java/

  public static String insertString(String originalString, String stringToBeInserted, int index)
  {

    // Create a new StringBuffer
    StringBuffer newString = new StringBuffer(originalString);

    newString.insert(index + 1, stringToBeInserted);

    return newString.toString();
  }

  public static int reverse(int number) {
    int rev = 0;
    while(number != 0) {
      rev *= 10;
      rev += number%10;
      number /= 10;
    }
    return rev;
  }

  public static String compute2 (int number) {
    // int copy = number;
    String computedNumber = compute(number);
    String s = "";
    int noOfZeros = numberOfZeros(number);

    //if there are no zeros in the number, then compute() is enough
    if(noOfZeros == 0) {
      return computedNumber;
    }

    //another scenario is the number not being divisible by either 3, 5, 7, nor containing them
    if(computedNumber == "") {

      while (number != 0) {

        String convert = Integer.toString(number % 10);
        if (number % 10 == 0) {
          s += "*";
        }
        else {
          s += convert;
        }
        number /= 10;
      }
      return s;
    }

    //the only scenario left is if there is a computedNumber string
    //first we'll skip the sequences generated by the divisors, since its the thing we look for first in compute()
    //then if we meet a digit that is 3,5,7 we'll add 3 to the index value (since Foo, Bar, Qix have the length of 3)
    // when we encounter a digit that is 0, we add a star

    int rev = reverse(number);
    int insert_index = numberOfDivisors(number) * 3;

    while(rev != 0) {

      int digit = rev % 10;
      if(digit == 0) {
        computedNumber = computedNumber.substring(0, insert_index) + "*" + computedNumber.substring(insert_index, computedNumber.length());
        //insert_index += 3;
      }
      else if (digit == 3 || digit == 5 || digit == 7)
      {
        insert_index += 3;
      }
      rev /= 10;
    }

    return computedNumber;

  }

  public static void test_compute(int n) {
    for(int i = 1; i < n; i++) {
      String s = compute(i);
      System.out.print(i + "=>");
      if(s != "") {
        System.out.print(compute(i));
      } else {
        System.out.print(i);
      }
      System.out.println(" ");
    }
  }


  public static void main(String[] args) {

    //test_compute(22);
    System.out.println(compute2(101));
    System.out.println(compute2(303));
    System.out.println(compute2(105));
    System.out.println(compute2(10101));
  }

}
